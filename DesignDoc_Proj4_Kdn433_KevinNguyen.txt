                    +-------------------------+
                    |           CS 439        |
                    | PROJECT 4: FILE SYSTEMS |
                    |      DESIGN DOCUMENT    |
                    +-------------------------+

****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name: Kevin Nguyen
EID: kdn433
CS login: kxnguyen
Email: kxnguyen@gmail.com
Unique Number: 51075


Slip days used on this project: 0

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1: Sangwon Lee
EID1: sl34645
CS Login: bearbox
Email: fhqksl@hotmail.com
Unique Number: 51100
Ranking (scale below): Very Good

Name2:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):

Name3:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.




---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

"struct inode_disk
  {
    ...
    block_sector_t ptr[DIRECT_BLOCK_SIZE];
    block_sector_t parent;
    size_t direct_level_index;
    size_t first_level_index;
    size_t second_level_index;
    ...
  };

Inode_disk is a struct that is meant to hold data to our data blocks. We work with inode disk primarily.

"struct inode 
  {
    int open_cnt;                       /* Number of openers. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    off_t length;                       /* Inode length */
    bool removed;                       /* True if deleted, false otherwise. */
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    struct inode_disk data;             /* Inode content. */
    struct lock *lock;                  /* Inode lock for synchronization */
  };

Inode struct is meant to hold permissions data, lock, and pointer to the inode_disk data.

"block_sector_t ptr[DIRECT_BLOCK_SIZE];"

This is meant to keep data track of block sector size.

"block_sector_t parent;"

This variable is meant to keep a tracking of the previous inode and provide some indication of a parent directory.

"size_t direct_level_index;"

This is meant to keep info about our direct block that points to some data blocks.

"size_t first_level_index;"

This is meant to keep information about the first-level indirect block in our multilevel index design.

"size_t second_level_index;"

This is meant to keep information about the second-level indirect block in our multilevel index design.


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

Our max file size was approximately 8 MB. 

We have 10 direct blocks, 1 indirect blocks, and 1 doubly indirect blocks for a total of 12 
block pointers. We also have a 512 byte block size and 128 block pointers.

(10 * 512) + (1 * 128 * 512 ) + (1 * 128 * 128 * 512) = 8459264 Bytes == 8.4 MB

8.4 MB...about 8 MB


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

We used locks to prevent our file to extend more than necessary. We have an
inode lock that we would place in our functions to protect one process from
others. The lock is released at the end so another process can take it. Our
file extend is likely to grow sequentially.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

In our design, we keep track of the length for our reads and writes.
The problem might be similar to the readers/writers problem for 
synchronization. In this case, we had length change when data has been
altered, but only allow for reading when the data is set. If so, the
writer process stops writing so the reader process can read the data
of the appropriate length. 

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, one or many processes reading from a file
>> cannot forever prevent another process from writing to the file, and
>> one or many processes writing to a file cannot forever prevent
>> another process from reading the file.

We had to place priority on readers needing to read information from
the file. However, we also want to be able to write data that may be important.
The readers are free to read as long as the writers condition variable is set or unlocked.
Readers only read what is written, but writers (when given the chance) can write
data to completion; readers may read soon after. Interestingly, readers could
technically read all or partial of the data so our readers are unrestricted compared
to the writer. However, we still want to protect each other from interferences in-between.


---- RATIONALE ----

>> A6: Is your file layout a multilevel indexed structure?  If so, why
>> did you choose this particular combination of direct, indirect, and
>> doubly indirect blocks?  If not, why did you choose an alternative
>> file structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

We did use a multilevel index structure with direct, indirect, and doubly indirect blocks.
Our choice was based on needing a large file size. Large enough to support a large quantity
of pointers to data blocks. We wanted possibly larger space in case we need to over extend
or need more room for file data.


			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

"struct inode;"

Each directory should have an inode so each inode can have a subdirectory.

"bool sub_dir;"

This variable lets us know if there is a sub directory inside.

"struct dir *cur_dir;"  

This is meant to have the thread to focus in only the current working directory.


---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

We use the strtok_r function to obtain our filename string in pieces. We then iterate through and check if it is a root, ".", or ".." type of token. If it is then, we can parse the appropriate conditional logic and set the current working directory if needed. However, we set our directory if there is one. We had to first close and free the previous directory materials since we are not accessing that anymore, but we need to also set our working directory to the current one and making sure we open the new directory.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

The directory inode has locks. As a result, when the lock is acquired no other outside interference can happen until the current lock is released. Only a single attempt may perform an operation on a directory no matter what. The locks provide protection from simultaneous alterations.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If that's not allowed, how do you
>> prevent it?

For our design, should not allow for removal. We keep track of the number
of times a directory is opened; as a result, we can only remove if there are
no references (or counts) to that directory. Otherwise, it can be eligible for
removal. Multiple or simultaneous operations are some of our objectives to keep
our file system consistent.

---- RATIONALE ----

>> B6: How is the current directory of a process represented in your
>> implementation? How did you choose this representation?

We used the struct dir for most o fthe directory implementation. Dir also has the 
inode data declared inside; as a result, we can have also to the directory and then to the
directory's inode. Implicitly, we can also have access to the subdirectories (if any) from the
inode. The current working directory is kept track of in the thread. We chose this representation
because it was simple to understand like a linked list. The directories appear like they follow
each other and we set the current working directory as needed.  



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
